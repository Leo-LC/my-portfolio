---
import { Icon } from "astro-icon";
---

<div class="cards-wrapper relative z-[1] grid gap-2">
  <div class="card">
    <div class="card_content">
      <Icon name="fa-brands:react" />
      <span>React</span>
    </div>
  </div>
  <div class="card">
    <div class="card_content">
      <Icon name="fa-brands:node-js" />
      <span>Node</span>
    </div>
  </div>

  <div class="card">
    <div class="card_content">
      <Icon name="simple-icons:typescript" />
      <span>TypeScript</span>
    </div>
  </div>
  <div class="card">
    <div class="card_content">
      <Icon name="simple-icons:astro" />
      <span>Astro</span>
    </div>
  </div>
  <div class="card">
    <div class="card_content">
      <Icon name="logos:nextjs-icon" />
      <span>Next</span>
    </div>
  </div>
  <div class="card">
    <div class="card_content">
      <Icon name="fa-brands:figma" />
      <span>Figma</span>
    </div>
  </div>
  <div class="card">
    <div class="card_content">
      <Icon name="simple-icons:redux" />
      <span>Redux</span>
    </div>
  </div>
  <div class="card">
    <div class="card_content">
      <Icon name="fa-brands:git-alt" />
      <span>Git</span>
    </div>
  </div>
</div>

<style>
  .cards-wrapper {
    grid-template-columns: repeat(8, 10vw);
    grid-auto-rows: 10vw;
  }

  @media screen and (max-width: 1279px) {
    .cards-wrapper {
      grid-template-columns: repeat(4, 20vw);
      grid-auto-rows: 20vw;
    }
  }

  @media screen and (max-width: 767px) {
    .cards-wrapper {
      grid-template-columns: repeat(2, 30vw);
      grid-auto-rows: 30vw;
    }
  }

  .cards-wrapper:hover .card {
    background: radial-gradient(
      800px circle at var(--xPos) var(--yPos),
      var(--cyan-a8),
      transparent 15%
    );
  }
  .card {
    position: relative;
    display: flex;
    justify-content: center;
    align-items: center;
    background: radial-gradient(
      400px circle at 0 0,
      var(--cyan-a2),
      transparent 0%
    );
    border-radius: 8px;
    transition: 0.15s;
  }

  .card::before {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    border-radius: inherit;
    background: radial-gradient(
      500px circle at var(--xPos) var(--yPos),
      var(--cyan-a2),
      transparent 35%
    );
    opacity: 0;
    transition: all 0.15s ease-in-out;
  }

  .card:hover::before {
    opacity: 1;
  }

  .card_content {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    gap: 16px;
    background: var(--component-bg);
    border-radius: inherit;
    transition: all 0.25s;
    height: calc(100% - 2px);
    width: calc(100% - 2px);
  }

  [astro-icon] {
    width: 60px;
    height: 60px;
    font-size: 50px;
  }

  .card span {
    font-family: var(--paragraph-font-family);
    font-weight: 200;
    font-size: 1rem;
    color: var(--text-secondary);
  }

  @media screen and (max-width: 767px) {
    [astro-icon] {
      width: 40px;
      height: 40px;
      font-size: 40px;
    }

    .card span {
      font-size: 1rem;
    }
  }

  .card :is(svg, p) {
    opacity: 0.45;
    transition: 0.3s;
    color: var(--text-primary);
    fill: var(--text-primary);
  }

  .card:hover :is(svg, p) {
    opacity: 1;
  }
</style>

<script>
  const cards = document.querySelectorAll(
    ".card",
  ) as NodeListOf<HTMLDivElement>;
  const wrapper = document.querySelector(".cards-wrapper") as HTMLDivElement;

  wrapper?.addEventListener("mousemove", (event) => {
    cards.forEach((card) => {
      const rect = card.getBoundingClientRect();
      const x = event.clientX - rect.left;
      const y = event.clientY - rect.top;
      card.style.setProperty("--xPos", `${x}px`);
      card.style.setProperty("--yPos", `${y}px`);
    });
  });
</script>
