---
import ThemeSwitch from "./ThemeSwitch.astro";
---

<!-- <div class="loader text-8xl grid place-content-center">WELCOME</div> -->
<section id="hero" class="relative min-h-screen">
  <div
    class="hero_wrapper absolute inset-0 pt-[var(--header-height)] pb-[var(--footer-height)] overflow-hidden"
  >
    <div
      class="social text-white absolute left-8 bottom-0 flex flex-col-reverse gap-4 items-center"
    >
      <div class="line"></div>
      <a href="">Fb</a><a href="">Ig</a><a href="">Ln</a><a href="">Gh</a>
    </div>

    <!-- TODO : optimiser image -->
    <div class="absolute inset-0 opacity-10 grayscale">
      <img class="thumbnail" src="src/images/Stars.jpg" alt="" />
    </div>
    <div class="flex justify-end">
      <!--       <p>Stop Scrolling</p> -->
    </div>
    <div class="flex">
      <ThemeSwitch />
    </div>
    <div class="flex items-end">
      <div class="clip">
        <h3 id="first-line" class="text-[1.75rem] md:text-5xl xl:text-[3.5rem]">
          Hi my name is LÃ©o,
        </h3>
      </div>
    </div>
    <div class="flex items-end">
      <div class="clip">
        <h3 class="text-[1.75rem] md:text-5xl xl:text-[3.5rem]">
          I am a dedicated, passionate
        </h3>
      </div>
    </div>
    <div class="flex">
      <div class="clip">
        <h1 class="text-[6rem] md:text-[10rem] xl:text-[12rem] uppercase">
          Front-End
        </h1>
      </div>
    </div>
    <div class="flex">
      <div class="clip">
        <h1 class="text-[6rem] md:text-[10rem] xl:text-[12rem] uppercase">
          Developer
        </h1>
      </div>
    </div>
    <div class="flex mb-8">
      <div class="clip">
        <h3 id="last-line" class="text-[1.75rem] md:text-5xl xl:text-[3.5rem]">
          Let's create <span class="accent">YOUR</span> web today.
        </h3>
      </div>
    </div>
    <div class="flex flex-col justify-center text-center gap-4">
      <a href="">Contact me</a>
      <div class="flex flex-col">
        <p>or start scrolling</p>
        <svg
          xmlns="http://www.w3.org/2000/svg"
          xmlns:xlink="http://www.w3.org/1999/xlink"
          version="1.1"
          x="0px"
          y="0px"
          viewBox="0 0 100 125"
          style="enable-background:new 0 0 100 100;"
          xml:space="preserve"
          ><style type="text/css">
            .st0 {
              fill: #ffffff;
              stroke: white;
              stroke-width: 2.5;
              stroke-miterlimit: 10;
            }
          </style><line class="st0" x1="50.1" y1="24.5" x2="50.1" y2="74.9"
          ></line><line class="st0" x1="64.7" y1="59.9" x2="49.1" y2="75.5"
          ></line><line class="st0" x1="35.3" y1="59.9" x2="50.9" y2="75.5"
          ></line></svg
        >
      </div>
    </div>
  </div>
</section>

<!-- Parallax Script -->
<script>
  /* import simpleParallax from "simple-parallax-js";
  var image = document.getElementsByClassName("thumbnail");
  new simpleParallax(image); */
</script>

<style>
  section {
    background: radial-gradient(
      var(--bg-primary) 0%,
      var(--bg-primary) 30%,
      var(--accent-component-bg-active) 100%
    );
    background-size: 150% 150%;
    background-repeat: no-repeat;

    /*     animation: movingGradient 10s linear infinite forwards; */
  }

  @keyframes movingGradient {
    0% {
      background-position: 50% 50%;
    }
    20% {
      background-position: var(--pos-20);
    }
    40% {
      background-position: var(--pos-40);
    }
    60% {
      background-position: var(--pos-60);
    }
    80% {
      background-position: var(--pos-80);
    }
    100% {
      background-position: 50% 50%;
    }
  }

  h1 {
    color: var(--text-primary);
    font-family: var(--headings-font-family);
    font-weight: var(--headings-font-weight);
    line-height: 0.95;
  }

  h3 {
    letter-spacing: -0.2rem;
    line-height: 1;
    padding-left: 0.2rem;
  }

  .line {
    width: 2px;
    height: 200px;
    background-color: #ffffff;
  }
  .hero_wrapper {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
  }

  .clip {
    clip-path: polygon(0 0, 100% 0, 100% 100%, 0% 100%);
    height: fit-content;
  }

  .clip:has(#last-line) {
    height: 52%;
  }

  img {
    position: absolute;
    height: 100%;
    object-fit: cover;
  }

  #title-cursor {
    line-height: 0.6;
  }
  .accent {
    position: relative;
    --after-width: 0%;
  }

  .accent::after {
    content: "";
    position: absolute;
    z-index: -1;
    top: 0;
    left: 0;
    width: var(--after-width);
    height: 100%;
    transform: translateX(-5%);

    background-color: var(--accent-bg-solid-primary);
    transition: all 0.3s ease-in-out;
  }
</style>
<!-- Loader Style -->
<!-- <style>
  .loader {
    position: fixed;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
    background-color: var(--border-strong);
    z-index: 10;
    border-block: 2px solid black;
  }
</style> -->
<!-- Animation Script -->
<!-- <script>
  import { gsap } from "gsap";
  import { ScrollTrigger } from "gsap/ScrollTrigger";
  gsap.registerPlugin(ScrollTrigger);

  let navItems = document.querySelectorAll(".nav-item");
  let separator = document.querySelector("header .separator");
  let firstLine = document.querySelector("#first-line");
  let lastLine = document.querySelector("#last-line");
  let h1Elements = document.querySelectorAll("h1");

  const accent = document.querySelector(".accent") as HTMLElement;
  const themeTrigger = document.querySelector("#theme-trigger") as HTMLElement;

  let loader = document.querySelector(".loader");

  let titleAnimation = gsap.timeline({});
  h1Elements.forEach((h1Element) => {
    titleAnimation.from(h1Element, {
      yPercent: 100,
      duration: 0.5,
      ease: "power2.inOut",
    });
  });

  let tl = gsap.timeline({
    delay: 1,
  });

  const cursor = document.querySelector("#title-cursor");
  gsap.from(cursor, {
    delay: 6,
    opacity: 0,
    ease: "power2.inOut",
    repeat: -1,
    yoyo: true,
  });

  /* tl.to(loader, {
    scaleY: 0.001,
    transformOrigin: "center",
    duration: 0.5,
  })
    .to(loader, {
      scaleX: 0.002,
      transformOrigin: "center",
      duration: 0.5,
    })
    .to(loader, {
      top: "calc(-50vh + var(--header-height))",

      duration: 1,
    }) */

  /* HERO ANIMATIONs */
  tl.from(separator, {
    scaleX: 0,
    transformOrigin: "center",
    duration: 1,
    ease: "power2.inOut",
  })
    .fromTo(
      navItems,
      {
        y: 60,
      },
      {
        y: 0,
        stagger: 0.1,
        duration: 0.5,
      },
    )
    .from(themeTrigger, {
      xPercent: 100,
      duration: 0.5,
      ease: "power2.inOut",
    })
    .from(
      firstLine,
      {
        y: 60,
        duration: 0.5,
        ease: "power2.inOut",
      },
      "-=0.5",
    )
    .add(titleAnimation)

    .from(
      lastLine,
      {
        y: 60,
        duration: 0.5,
        ease: "power2.inOut",
      },
      "-=1",
    )
    .to(accent, {
      duration: 0.5,
      ease: "elastic",
      onUpdate: () => {
        accent.style.setProperty("--after-width", "110%");
      },
    });
</script> -->

<!-- Background Animation Script -->
<!-- <script>
  // Function to generate random background positions
  function getRandomBackgroundPosition() {
    const x = Math.random() * 100;
    const y = Math.random() * 100;
    return `${x}% ${y}%`;
  }

  const hero = document.querySelector("#hero") as HTMLElement;

  // Set custom properties for keyframes
  hero.style.setProperty("--pos-20", getRandomBackgroundPosition());
  hero.style.setProperty("--pos-40", getRandomBackgroundPosition());
  hero.style.setProperty("--pos-60", getRandomBackgroundPosition());
  hero.style.setProperty("--pos-80", getRandomBackgroundPosition());
</script> -->

<!-- <script>
  import simpleParallax from "simple-parallax-js";

  var image = document.getElementsByClassName("thumbnail");
  new simpleParallax(image);
</script> -->
